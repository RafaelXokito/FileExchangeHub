name: Deploy Socket Server to Google Cloud Run

on:
  push:
    branches:
      - release
    paths:
      - 'socket-server/**'

jobs:
  docker-build-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Build and push the socket server image
      uses: docker/build-push-action@v2
      with:
        context: socket-server
        file: socket-server/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fileexchangehubsocketserver:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build-push

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Google Cloud credentials
      run: |
        echo '${{ secrets.GOOGLE_CREDENTIALS }}' > auth.json
        echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/auth.json" >> $GITHUB_ENV

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Init
      run: terraform init -input=false -force-copy

    - name: Terraform Validate
      run: terraform validate

    - name: Set variables for Terraform
      run: |
        echo "project_id = \"${{ secrets.PROJECT_ID }}\"" >> production.auto.tfvars
        echo "socket_server_image = \"${{ secrets.DOCKER_HUB_USERNAME }}/fileexchangehubsocketserver:latest\"" >> production.auto.tfvars

    - name: Terraform Plan
      run: terraform plan -target=module.production_socket_server -var-file=production.auto.tfvars

    - name: Terraform Apply Services
      run: terraform apply -auto-approve -target=module.production_socket_server -var-file=production.auto.tfvars

    - name: Terraform Apply Services
      run: terraform apply -auto-approve -target=module.production_socket_server -var-file=production.auto.tfvars

    - name: Export Terraform Outputs
      run: terraform output -json > outputs.json

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq
          
    - name: Store Socket Server URI as GitHub Secret
      if: ${{ success() }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        SOCKET_SERVER_URI=$(jq -r '.socket_server_uri.value' outputs.json)
        curl -X PUT \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github+json" \
          https://api.github.com/repos/$GITHUB_REPOSITORY/actions/secrets/SOCKET_SERVER_URI \
          -d '{"encrypted_value":"'"$(echo -n "$SOCKET_SERVER_URI" | gpg --symmetric --armor --cipher-algo AES256 --batch --passphrase="$GITHUB_TOKEN" | awk '{printf "%s\\n", $0}')"'" ,"key_id":"'"$(curl -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/$GITHUB_REPOSITORY/actions/secrets/public-key" | jq -r '.key_id')"'"}'

  handle_failure:
    runs-on: ubuntu-latest
    needs: [docker-build-push, deploy]
    if: ${{ failure() }}
    steps:
      - name: Create issue on failure
        uses: actions/github-script@v6
        with:
          token: ${{ secrets.GH_ISSUE_CREATOR_TOKEN }}
          script: |
            const issueTitle = "Deployment Socket Server Workflow Failed";
            let errorMessage = '';
            if (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure') {
              errorMessage = github.event.workflow_run.head_commit.message;
            }
            const issueBody = `Workflow **${process.env.GITHUB_WORKFLOW}** failed on the branch **${process.env.GITHUB_REF}**. The error message is as follows:
            \`\`\`
            ${errorMessage}
            \`\`\`
            Please fix the issue.`;
            
            const newIssue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody
            });