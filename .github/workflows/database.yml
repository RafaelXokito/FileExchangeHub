name: Deploy Database to Mongo DB Atlas

on:
  push:
    branches:
      - release

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Google Cloud credentials
      run: |
        echo '${{ secrets.GOOGLE_CREDENTIALS }}' > auth.json
        echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/auth.json" >> $GITHUB_ENV

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Init
      run: terraform init -input=false -force-copy

    - name: Terraform Validate
      run: terraform validate

    - name: Set variables for Terraform
      run: |
        echo "mongo_org_id = \"${{ secrets.MONGO_ORG_ID }}\"" >> production.auto.tfvars
        echo "mongo_public_key = \"${{ secrets.MONGO_PUBLIC_KEY }}\"" >> production.auto.tfvars        
        echo "mongo_private_key = \"${{ secrets.MONGO_PRIVATE_KEY }}\"" >> production.auto.tfvars
        echo "mongo_dbuser_password = \"${{ secrets.MONGO_DBUSER_PASSWORD }}\"" >> production.auto.tfvars
        echo "mongo_dbuser = \"${{ secrets.MONGO_DBUSER }}\"" >> production.auto.tfvars

    - name: Terraform Plan
      run: terraform plan -target=module.production_db -var-file=production.auto.tfvars

    - name: Terraform Apply MongoDB
      run: terraform apply -auto-approve -target=module.production_db -var-file=production.auto.tfvars

    - name: Export Terraform Outputs
      run: terraform output -json > outputs.json

    - name: Extract Mongo Connection String
      run: |
        MONGO_CONNECTION_STRING=$(jq -r '.connection_strings.value' outputs.json)
        echo "MONGO_CONNECTION_STRING=$MONGO_CONNECTION_STRING"
      
    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq
          
    - name: Store Database connection string as GitHub Secret
      if: ${{ success() }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        MONGO_CONNECTION_STRING=$(jq -r '.connection_strings.value' outputs.json)
        curl -X PUT \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github+json" \
          https://api.github.com/repos/$GITHUB_REPOSITORY/actions/secrets/MONGO_CONNECTION_STRING \
          -d '{"encrypted_value":"'"$(echo -n "$MONGO_CONNECTION_STRING" | gpg --symmetric --armor --cipher-algo AES256 --batch --passphrase="$GITHUB_TOKEN" | awk '{printf "%s\\n", $0}')"'" ,"key_id":"'"$(curl -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/$GITHUB_REPOSITORY/actions/secrets/public-key" | jq -r '.key_id')"'"}'


  handle_failure:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: ${{ failure() }}
    steps:
      - name: Create issue on failure
        uses: actions/github-script@v6
        with:
          token: ${{ secrets.GH_ISSUE_CREATOR_TOKEN }}
          script: |
            const issueTitle = "Deployment Database Workflow Failed";
            let errorMessage = '';
            if (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure') {
              errorMessage = github.event.workflow_run.head_commit.message;
            }
            const issueBody = `Workflow **${process.env.GITHUB_WORKFLOW}** failed on the branch **${process.env.GITHUB_REF}**. The error message is as follows:
            \`\`\`
            ${errorMessage}
            \`\`\`
            Please fix the issue.`;
            
            const newIssue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody
            });