name: Deploy API Server to Google Cloud Run

on:
  push:
    branches:
      - release
    paths:
      - 'server/**'

jobs:
  docker-build-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Build and push the server image
      uses: docker/build-push-action@v2
      with:
        context: server
        file: server/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fileexchangehubserver:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build-push

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Google Cloud credentials
      run: |
        echo '${{ secrets.GOOGLE_CREDENTIALS }}' > auth.json
        echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/auth.json" >> $GITHUB_ENV

    - name: Wait for required GitHub Variables
      run: |
        attempts=0
        while true; do
          gateway_uri=${{ vars.GATEWAY_URI }}
          mongo_connection_string=${{ vars.MONGO_CONNECTION_STRING }}

          if [[ ! -z "$gateway_uri" && ! -z "$mongo_connection_string" ]]; then
            echo "Required variables found. Proceeding with the deployment."
            break
          fi

          attempts=$((attempts + 1))
          if [[ $attempts -ge 20 ]]; then
            echo "Failed to find required variables after $attempts attempts. Failing the workflow."
            exit 1
          fi

          echo "Required variables not found. Waiting for 30 seconds before trying again."
          sleep 30
        done

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init -input=false -force-copy

    - name: Terraform Validate
      run: terraform validate

    - name: Set variables for Terraform
      run: |
        echo "project_id = \"${{ secrets.PROJECT_ID }}\"" >> production.auto.tfvars
        echo "server_image = \"${{ secrets.DOCKER_HUB_USERNAME }}/fileexchangehubserver:${{ github.sha }}\"" >> production.auto.tfvars
        echo "gateway_uri = \"${{ vars.GATEWAY_URI }}\"" >> production.auto.tfvars
        echo "mongo_dbuser = \"${{ secrets.MONGO_DBUSER }}\"" >> production.auto.tfvars
        echo "mongo_dbuser_password = \"${{ secrets.MONGO_DBUSER_PASSWORD }}\"" >> production.auto.tfvars
        echo "mongo_connection_string = \"${{ vars.MONGO_CONNECTION_STRING }}\"" >> production.auto.tfvars

    - name: Terraform Plan
      run: |
        MAX_RETRIES=20
        RETRY_DELAY=30
        count=0
        until terraform plan -target=module.production_server -var-file=production.auto.tfvars; do
          count=$((count + 1))
          if [ $count -ge $MAX_RETRIES ]; then
            echo "Failed after $MAX_RETRIES retries"
            exit 1
          fi
          echo "Retrying in $RETRY_DELAY seconds (attempt $count of $MAX_RETRIES)"
          sleep $RETRY_DELAY
        done

    - name: Terraform Apply
      run: |
        MAX_RETRIES=20
        RETRY_DELAY=30
        count=0
        until terraform apply -auto-approve -target=module.production_server -var-file=production.auto.tfvars; do
          count=$((count + 1))
          if [ $count -ge $MAX_RETRIES ]; then
            echo "Failed after $MAX_RETRIES retries"
            exit 1
          fi
          echo "Retrying in $RETRY_DELAY seconds (attempt $count of $MAX_RETRIES)"
          sleep $RETRY_DELAY
        done

    - name: Extract Server URI
      id: extract_server_uri
      run: |
        echo "SERVER_URI=$(terraform output server_uri)" >> "$GITHUB_ENV"

    - name: Store Database connection string as GitHub Secret
      if: ${{ success() }}
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PERMISSIONS }}
      run: |
        JSON_PAYLOAD="{\"name\":\"SERVER_URI\",\"value\":${SERVER_URI}}"
        echo $JSON_PAYLOAD

        VARS_SERVER_URI=${{ vars.SERVER_URI }}

        if [ -z "$VARS_SERVER_URI" ]; then
          echo "Variable does not exist. Creating a new variable..."
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/$GITHUB_REPOSITORY/actions/variables \
            -d "$JSON_PAYLOAD"
        else
          echo "Variable exists. Updating the variable..."
          VARIABLE_URL="https://api.github.com/repos/$GITHUB_REPOSITORY/actions/variables/SERVER_URI"
          curl -L \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            $VARIABLE_URL \
            -d "$JSON_PAYLOAD"
        fi